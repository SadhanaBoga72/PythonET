#expense_tracker

import tkinter as tk
from tkinter import messagebox

# Create the main window
root = tk.Tk()
root.title("Expense Tracker")
root.geometry("400x400")

# Global variables to store expenses and total amount
expenses = []
total_spent = 0.0

# GUI Elements
amount_label = tk.Label(root, text="Amount:")
amount_label.pack()

amount_entry = tk.Entry(root)
amount_entry.pack()

category_label = tk.Label(root, text="Category:")
category_label.pack()

category_entry = tk.Entry(root)
category_entry.pack()

add_button = tk.Button(root, text="Add Expense")
add_button.pack()

expense_list_text = tk.Text(root, height=10, width=40)
expense_list_text.pack()

total_label = tk.Label(root, text="Total Amount Spent: $0")
total_label.pack()

# Function to add an expense
def add_expense():
    global total_spent
    amount = amount_entry.get()
    category = category_entry.get()

    # Validate input
    if not amount or not category:
        messagebox.showerror("Input Error", "Please enter both amount and category")
        return

    try:
        amount = float(amount)
    except ValueError:
        messagebox.showerror("Input Error", "Amount should be a number")
        return

    # Add expense to the list
    expenses.append({"amount": amount, "category": category})
    total_spent += amount

    # Update the display
    expense_list_text.insert(tk.END, f"Amount: ${amount} | Category: {category}\n")
    total_label.config(text=f"Total Amount Spent: ${total_spent:.2f}")

    # Clear the input fields
    amount_entry.delete(0, tk.END)
    category_entry.delete(0, tk.END)

# Bind the button to the add_expense function
add_button.config(command=add_expense)

# Function to save expenses to a file
def save_expenses():
    with open("expenses.txt", "w") as file:
        for expense in expenses:
            file.write(f"{expense['amount']},{expense['category']}\n")

# Function to load expenses from a file
def load_expenses():
    global total_spent
    try:
        with open("expenses.txt", "r") as file:
            for line in file:
                amount, category = line.strip().split(',')
                expenses.append({"amount": float(amount), "category": category})
                total_spent += float(amount)
                expense_list_text.insert(tk.END, f"Amount: ${amount} | Category: {category}\n")
        total_label.config(text=f"Total Amount Spent: ${total_spent:.2f}")
    except FileNotFoundError:
        pass

# Load expenses at the start
load_expenses()

# Ensure to save expenses when the window is closed
root.protocol("WM_DELETE_WINDOW", lambda: [save_expenses(), root.destroy()])

# Run the main loop
root.mainloop()
